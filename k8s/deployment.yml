apiVersion: apps/v1
kind: Deployment
metadata:
  name: devops-pipeline
  namespace: production
  labels:
    app: devops-pipeline
    version: "1.0.0"
spec:
  replicas: 3
  selector:
    matchLabels:
      app: devops-pipeline
  template:
    metadata:
      labels:
        app: devops-pipeline
        version: "1.0.0"
    spec:
      containers:
      - name: devops-pipeline
        image: ghcr.io/goliviernation/devops-pipeline:latest
        ports:
        - containerPort: 3000
          name: http
        env:
        - name: NODE_ENV
          value: "production"
        - name: PORT
          value: "3000"
        - name: DATABASE_URL
          valueFrom:
            secretKeyRef:
              name: app-secrets
              key: database-url
        - name: AWS_REGION
          valueFrom:
            configMapKeyRef:
              name: app-config
              key: aws-region
        - name: AWS_ACCOUNT_ID
          valueFrom:
            configMapKeyRef:
              name: app-config
              key: aws-account-id
        - name: EKS_CLUSTER_NAME
          valueFrom:
            configMapKeyRef:
              name: app-config
              key: eks-cluster-name
        resources:
          requests:
            memory: "256Mi"
            cpu: "250m"
          limits:
            memory: "512Mi"
            cpu: "500m"
        livenessProbe:
          httpGet:
            path: /api/health
            port: 3000
          initialDelaySeconds: 30
          periodSeconds: 10
          timeoutSeconds: 5
          failureThreshold: 3
        readinessProbe:
          httpGet:
            path: /api/health
            port: 3000
          initialDelaySeconds: 5
          periodSeconds: 5
          timeoutSeconds: 3
          failureThreshold: 3
        securityContext:
          runAsNonRoot: true
          runAsUser: 1001
          allowPrivilegeEscalation: false
          readOnlyRootFilesystem: true
          capabilities:
            drop:
            - ALL
        volumeMounts:
        - name: tmp
          mountPath: /tmp
        - name: nextjs-cache
          mountPath: /app/.next/cache
      volumes:
      - name: tmp
        emptyDir: {}
      - name: nextjs-cache
        emptyDir: {}
      securityContext:
        fsGroup: 1001
      serviceAccountName: devops-pipeline-sa
---
apiVersion: v1
kind: Service
metadata:
  name: devops-pipeline-service
  namespace: production
  labels:
    app: devops-pipeline
spec:
  selector:
    app: devops-pipeline
  ports:
  - name: http
    port: 80
    targetPort: 3000
    protocol: TCP
  type: ClusterIP
---
apiVersion: networking.k8s.io/v1
kind: Ingress
metadata:
  name: devops-pipeline-ingress
  namespace: production
  annotations:
    kubernetes.io/ingress.class: "nginx"
    cert-manager.io/cluster-issuer: "letsencrypt-prod"
    nginx.ingress.kubernetes.io/ssl-redirect: "true"
    nginx.ingress.kubernetes.io/force-ssl-redirect: "true"
spec:
  tls:
  - hosts:
    - devops-pipeline.example.com
    secretName: devops-pipeline-tls
  rules:
  - host: devops-pipeline.example.com
    http:
      paths:
      - path: /
        pathType: Prefix
        backend:
          service:
            name: devops-pipeline-service
            port:
              number: 80
---
apiVersion: v1
kind: ConfigMap
metadata:
  name: app-config
  namespace: production
data:
  aws-region: "us-west-2"
  aws-account-id: "123456789012"
  eks-cluster-name: "production-cluster"
  grafana-url: "https://grafana.example.com"
  prometheus-url: "http://prometheus.monitoring.svc.cluster.local:9090"
---
apiVersion: v1
kind: Secret
metadata:
  name: app-secrets
  namespace: production
type: Opaque
stringData:
  database-url: "postgresql://user:password@postgres.database.svc.cluster.local:5432/devops_pipeline"
  grafana-api-key: "your-grafana-api-key"
---
apiVersion: v1
kind: ServiceAccount
metadata:
  name: devops-pipeline-sa
  namespace: production
---
apiVersion: rbac.authorization.k8s.io/v1
kind: Role
metadata:
  namespace: production
  name: devops-pipeline-role
rules:
- apiGroups: [""]
  resources: ["pods", "services", "configmaps"]
  verbs: ["get", "list", "watch"]
- apiGroups: ["apps"]
  resources: ["deployments", "replicasets"]
  verbs: ["get", "list", "watch"]
---
apiVersion: rbac.authorization.k8s.io/v1
kind: RoleBinding
metadata:
  name: devops-pipeline-rolebinding
  namespace: production
subjects:
- kind: ServiceAccount
  name: devops-pipeline-sa
  namespace: production
roleRef:
  kind: Role
  name: devops-pipeline-role
  apiGroup: rbac.authorization.k8s.io
---
apiVersion: autoscaling/v2
kind: HorizontalPodAutoscaler
metadata:
  name: devops-pipeline-hpa
  namespace: production
spec:
  scaleTargetRef:
    apiVersion: apps/v1
    kind: Deployment
    name: devops-pipeline
  minReplicas: 3
  maxReplicas: 10
  metrics:
  - type: Resource
    resource:
      name: cpu
      target:
        type: Utilization
        averageUtilization: 70
  - type: Resource
    resource:
      name: memory
      target:
        type: Utilization
        averageUtilization: 80
